{"version":3,"sources":["stores/issue/constants.js","stores/issue/state.js","stores/issue/reducer.js","stores/reducers/index.js","stores/issue/action.js","utils/variables.js","api/issue.js","stores/issue/saga.js","stores/sagas/index.js","stores/index.js","component/common/loading.jsx","component/common/error.jsx","component/common/not-found.jsx","component/issues/index.jsx","stores/issue/selector.js","page/issues/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ISSUE","ISSUE_STORE","INITIAL_STATE","list","resultCount","error","loading","issueReducer","state","action","type","results","rootReducer","combineReducers","fetchIssueSuccess","arrGenre","value","name","fetchData","genre","fetch","then","res","json","handleGetIssueLoad","watchIssuesLoad","call","payload","delay","put","length","localStorage","setItem","JSON","stringify","takeLatest","rootSaga","all","issue","persistConfig","key","storage","persistedReducer","persistReducer","stores","store","sagaMiddleware","createSagaMiddleware","devTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","run","configureStore","persistor","persistStore","Loading","size","className","Error","NotFound","IssueListComponent","useState","filter","setFilter","visible","setVisible","detail","setDetail","dispatch","useDispatch","issueResp","useSelector","useCallback","useEffect","span","map","index","onClick","console","log","onSelecteGenre","item","xs","sm","showDetail","title","labels","label","number","user","login","onCancel","footer","body","IssueListPage","configStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c387ea1.chunk.js","sourcesContent":["export const ISSUE = {\r\n  LOAD: 'ISSUE_LOAD',\r\n  LOAD_SUCCESS: 'ISSUE_LOAD_SUCCESS',\r\n  LOAD_FAIL: 'ISSUE_LOAD_FAIL'\r\n}\r\n\r\nexport const ISSUE_STORE = 'issue';","const INITIAL_STATE = {\r\n  list: [],\r\n  resultCount: 0,\r\n  error: null,\r\n  loading: false,\r\n}\r\nexport default INITIAL_STATE","import { ISSUE } from \"./constants\";\r\nimport INITIAL_STATE from './state.js'\r\n\r\nconst issueReducer = (state = INITIAL_STATE, action) => {\r\n  if (action.type === ISSUE.LOAD) {\r\n    return { ...state, loading: true }\r\n  }\r\n  if (action.type === ISSUE.LOAD_SUCCESS) {\r\n    return { ...state, loading: false, list: action.results, resultCount: action.resultCount, error: null }\r\n  }\r\n  if (action.type === ISSUE.LOAD_FAIL) {\r\n    return { ...state, loading: false, list: [], resultCount: 0, error: action.error }\r\n  }\r\n  return state\r\n}\r\nexport default issueReducer;","import { combineReducers } from 'redux'\r\nimport issueReducer from \"../issue/reducer\";\r\nimport { ISSUE_STORE } from '../issue/constants'\r\n\r\nconst rootReducer = combineReducers({\r\n  [ISSUE_STORE]: issueReducer,\r\n})\r\nexport default rootReducer\r\n","import { ISSUE } from \"./constants\";\r\n\r\nconst fetchIssueRequest = payload => ({\r\n  type: ISSUE.LOAD,\r\n  payload,\r\n})\r\nconst fetchIssueSuccess = ({resultCount, results}) => ({\r\n  type: ISSUE.LOAD_SUCCESS,\r\n  resultCount,\r\n  results,\r\n})\r\n\r\nconst fetchIssueFail = error => ({\r\n  type: ISSUE.LOAD_FAIL,\r\n  error\r\n})\r\nexport {\r\n  fetchIssueRequest,\r\n  fetchIssueSuccess,\r\n  fetchIssueFail\r\n}","export const arrGenre = [\r\n  { value: \"all\", name: \"All\" },\r\n  { value: \"open\", name: \"Open\" },\r\n  { value: \"close\", name: \"Close\" },\r\n];\r\n\r\nexport const API_URL = 'https://api.github.com'\r\n","import { API_URL } from \"../utils/variables\";\r\n\r\nexport const fetchData = ({ genre }) => {\r\n  const state = genre || 'all'\r\n  return fetch(`${API_URL}/repos/nnluukhtn/employment_bot/issues?q=is%3Aissue+is%3A${state}`).then((res) => res.json())\r\n};","import { put, takeLatest, call, delay } from 'redux-saga/effects'\r\nimport { ISSUE } from \"./constants\";\r\nimport { fetchIssueSuccess, fetchIssueFail } from \"./action\";\r\nimport { fetchData } from '../../api/issue';\r\n\r\nexport function* handleGetIssueLoad(action) {\r\n  try {\r\n    const results = yield call(fetchData, action.payload)\r\n    yield delay(300)\r\n    yield put(fetchIssueSuccess({ resultCount: results.length, results }))\r\n    localStorage.setItem('__store', JSON.stringify(results))\r\n  } catch (error) {\r\n    yield put(fetchIssueFail(error))\r\n  }\r\n}\r\n\r\nexport default function* watchIssuesLoad() {\r\n  yield takeLatest(ISSUE.LOAD, handleGetIssueLoad)\r\n}","import { all } from 'redux-saga/effects';\r\nimport issue from '../issue/saga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    issue(),\r\n  ])\r\n}","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport rootReducer from \"./reducers\";\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from \"./sagas\";\r\n\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n\r\n  let devTool = null;\r\n  if(window) {\r\n    if(window.__REDUX_DEVTOOLS_EXTENSION__) {\r\n      devTool = window.__REDUX_DEVTOOLS_EXTENSION__();\r\n    }\r\n  }\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    compose(\r\n      applyMiddleware(sagaMiddleware),\r\n      devTool,\r\n    )\r\n  )\r\n  sagaMiddleware.run(rootSaga)\r\n  return store\r\n}\r\n\r\nconst stores = () => {\r\n  const store = configureStore();\r\n  let persistor = persistStore(store)\r\n  return {\r\n    store, persistor\r\n  }\r\n}\r\n\r\nexport default stores;","import React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Spin size=\"large\" className=\"loading-block\"></Spin>\r\n  );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\nconst Error = () => {\r\n  return (\r\n    <div>Some error occurred.</div>\r\n  );\r\n};\r\n\r\nexport default Error;","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div>Cannot find any result you are looking for!</div>\r\n  );\r\n};\r\n\r\nexport default NotFound;","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Row, Col, Modal } from \"antd\";\r\nimport { fetchIssueRequest } from \"../../stores/issue/action\";\r\nimport { issue } from \"../../stores/issue/selector\";\r\nimport Loading from \"../common/loading\";\r\nimport Error from \"../common/error\";\r\nimport NotFound from \"../common/not-found\";\r\nimport { arrGenre } from \"../../utils/variables\";\r\nimport \"./styles.scss\";\r\n\r\nconst IssueListComponent = () => {\r\n  const [filter, setFilter] = useState({\r\n    genre: arrGenre[0].value,\r\n  });\r\n  const [visible, setVisible] = useState(false)\r\n  const [detail, setDetail] = useState({})\r\n\r\n  const dispatch = useDispatch();\r\n  const issueResp = useSelector((state) => issue(state));\r\n\r\n  const onSelecteGenre = (genre) => {\r\n    console.log(`issueResp`, issueResp)\r\n    if(issueResp && issueResp.list && issueResp.list.length > 0) {\r\n    }\r\n    if (filter.genre === genre) {\r\n      setFilter({\r\n        genre: \"\",\r\n      });\r\n    } else {\r\n      setFilter({\r\n        genre,\r\n      });\r\n    }\r\n  };\r\n\r\n  const fetchData = useCallback(() => {\r\n    dispatch(fetchIssueRequest({ genre: filter.genre }));\r\n  }, [dispatch, filter]);\r\n\r\n  const showDetail = (item) => {\r\n    setDetail(item)\r\n    console.log(`item`, item)\r\n    setVisible(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [filter, fetchData]);\r\n\r\n  return (\r\n    <div className=\"main-layout\">\r\n      <Row className=\"filter-block\">\r\n        <Col span={24}>\r\n          <span className=\"title\">Filter State</span>\r\n        </Col>\r\n        <Col span={24}>\r\n          <div className=\"genre-list\">\r\n            {arrGenre &&\r\n              arrGenre.length > 0 &&\r\n              arrGenre.map((genre, index) => {\r\n                return (\r\n                  <div\r\n                    key={`genre-item-${index}`}\r\n                    onClick={() => onSelecteGenre(genre.value)}\r\n                    className={`genre-item ${\r\n                      genre.value === filter.genre ? \"active\" : \"\"\r\n                    } genre-item__${genre.value}`}\r\n                  >\r\n                    {genre.name}\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      {issueResp?.loading ? (\r\n        <Loading></Loading>\r\n      ) : issueResp?.list && issueResp?.list.length > 0 ? (\r\n        <>\r\n          <Row className=\"result-block\">\r\n            <Col span={24}>\r\n              <span className=\"title\">\r\n                Results ({(issueResp && issueResp.resultCount) || 0})\r\n              </span>\r\n            </Col>\r\n            {issueResp.list.map((item, index) => {\r\n              return (\r\n                <Col\r\n                  key={`result-item-${index}`}\r\n                  className=\"item-col\"\r\n                  xs={{ span: 24 }}\r\n                  sm={{ span: 24 }}\r\n                >\r\n                  <div className=\"item\" onClick={() => showDetail(item)}>\r\n                    <div className=\"state\">\r\n                      {item.state === \"open\" ? (\r\n                        <div className=\"open\">Open</div>\r\n                      ) : (\r\n                        <div className=\"close\">Close</div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                      <div className=\"title\">{item.title}</div>\r\n                      {item.labels?.length !== 0 &&\r\n                        item.labels.map((label, index) => (\r\n                          <div className=\"label\" key={`item-label-${index}`}>\r\n                            {label.name}\r\n                          </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"description\">\r\n                      <span>\r\n                        {`#${item.number} ${\r\n                          item.state === \"open\" ? \"open\" : \"close\"\r\n                        } by ${item.user.login}`}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              );\r\n            })}\r\n          </Row>\r\n          <Modal\r\n            title=\"Issue detail\"\r\n            visible={visible}\r\n            onCancel={() => setVisible(false)}\r\n            footer={[]}\r\n          >\r\n            <p>{detail.title}</p>\r\n            <p>{detail.body}</p>\r\n            <p>State: {detail.state}</p>\r\n          </Modal>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {issueResp?.error && <Error></Error>}\r\n          <NotFound></NotFound>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IssueListComponent;\r\n","import { ISSUE_STORE } from \"./constants\"\r\n\r\nexport const issue = state => state[ISSUE_STORE]\r\n","import React from \"react\";\r\nimport IssueListComponent from \"../../component/issues\";\r\n\r\nconst IssueListPage = () => {\r\n  return <IssueListComponent></IssueListComponent>;\r\n};\r\n\r\nexport default IssueListPage;\r\n","import React from \"react\";\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport './App.css';\r\nimport configureStore from \"./stores\";\r\nimport IssuesListPage from './page/issues'\r\n\r\nconst configStore = configureStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={configStore.store}>\r\n      <PersistGate persistor={configStore.persistor}>\r\n        <IssuesListPage></IssuesListPage>\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"antd/dist/antd.css\";\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}